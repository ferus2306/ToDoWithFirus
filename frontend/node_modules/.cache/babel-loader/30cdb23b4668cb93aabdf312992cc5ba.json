{"ast":null,"code":"import { _ as _objectWithoutPropertiesLoose } from './_rollupPluginBabelHelpers-1f0bf8c2.js';\nimport './isObject.js';\nimport { isPlainObject } from './isPlainObject.js';\n/**\n * Splits an object (`props`) into a tuple where the first item is an object\n * with the passed `keys`, and the second item is an object with these keys\n * omitted.\n *\n * @deprecated will be removed in version 2\n *\n * @example\n * import { splitProps } from \"reakit-utils\";\n *\n * splitProps({ a: \"a\", b: \"b\" }, [\"a\"]); // [{ a: \"a\" }, { b: \"b\" }]\n */\n\nfunction __deprecatedSplitProps(props, keys) {\n  var propsKeys = Object.keys(props);\n  var picked = {};\n  var omitted = {};\n\n  for (var _i = 0, _propsKeys = propsKeys; _i < _propsKeys.length; _i++) {\n    var key = _propsKeys[_i];\n\n    if (keys.indexOf(key) >= 0) {\n      picked[key] = props[key];\n    } else {\n      omitted[key] = props[key];\n    }\n  }\n\n  return [picked, omitted];\n}\n/**\n * Splits an object (`props`) into a tuple where the first item\n * is the `state` property, and the second item is the rest of the properties.\n *\n * It is also backward compatible with version 1. If `keys` are passed then\n * splits an object (`props`) into a tuple where the first item is an object\n * with the passed `keys`, and the second item is an object with these keys\n * omitted.\n *\n * @example\n * import { splitProps } from \"reakit-utils\";\n *\n * splitProps({ a: \"a\", b: \"b\" }, [\"a\"]); // [{ a: \"a\" }, { b: \"b\" }]\n *\n * @example\n * import { splitProps } from \"reakit-utils\";\n *\n * splitProps({ state: { a: \"a\" }, b: \"b\" }); // [{ a: \"a\" }, { b: \"b\" }]\n */\n\n\nfunction splitProps(props, keys) {\n  if (!isPlainObject(props.state) && keys) {\n    return __deprecatedSplitProps(props, keys);\n  }\n\n  var state = props.state,\n      restProps = _objectWithoutPropertiesLoose(props, [\"state\"]);\n\n  return [props.state, restProps];\n}\n\nexport { splitProps };","map":{"version":3,"sources":["/Users/firushanov/Desktop/Kadince/todowithfirus/frontend/node_modules/reakit-utils/es/splitProps.js"],"names":["_","_objectWithoutPropertiesLoose","isPlainObject","__deprecatedSplitProps","props","keys","propsKeys","Object","picked","omitted","_i","_propsKeys","length","key","indexOf","splitProps","state","restProps"],"mappings":"AAAA,SAASA,CAAC,IAAIC,6BAAd,QAAmD,yCAAnD;AACA,OAAO,eAAP;AACA,SAASC,aAAT,QAA8B,oBAA9B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,sBAAT,CAAgCC,KAAhC,EAAuCC,IAAvC,EAA6C;AAC3C,MAAIC,SAAS,GAAGC,MAAM,CAACF,IAAP,CAAYD,KAAZ,CAAhB;AACA,MAAII,MAAM,GAAG,EAAb;AACA,MAAIC,OAAO,GAAG,EAAd;;AAEA,OAAK,IAAIC,EAAE,GAAG,CAAT,EAAYC,UAAU,GAAGL,SAA9B,EAAyCI,EAAE,GAAGC,UAAU,CAACC,MAAzD,EAAiEF,EAAE,EAAnE,EAAuE;AACrE,QAAIG,GAAG,GAAGF,UAAU,CAACD,EAAD,CAApB;;AAEA,QAAIL,IAAI,CAACS,OAAL,CAAaD,GAAb,KAAqB,CAAzB,EAA4B;AAC1BL,MAAAA,MAAM,CAACK,GAAD,CAAN,GAAcT,KAAK,CAACS,GAAD,CAAnB;AACD,KAFD,MAEO;AACLJ,MAAAA,OAAO,CAACI,GAAD,CAAP,GAAeT,KAAK,CAACS,GAAD,CAApB;AACD;AACF;;AAED,SAAO,CAACL,MAAD,EAASC,OAAT,CAAP;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAASM,UAAT,CAAoBX,KAApB,EAA2BC,IAA3B,EAAiC;AAC/B,MAAI,CAACH,aAAa,CAACE,KAAK,CAACY,KAAP,CAAd,IAA+BX,IAAnC,EAAyC;AACvC,WAAOF,sBAAsB,CAACC,KAAD,EAAQC,IAAR,CAA7B;AACD;;AAED,MAAIW,KAAK,GAAGZ,KAAK,CAACY,KAAlB;AAAA,MACIC,SAAS,GAAGhB,6BAA6B,CAACG,KAAD,EAAQ,CAAC,OAAD,CAAR,CAD7C;;AAGA,SAAO,CAACA,KAAK,CAACY,KAAP,EAAcC,SAAd,CAAP;AACD;;AAED,SAASF,UAAT","sourcesContent":["import { _ as _objectWithoutPropertiesLoose } from './_rollupPluginBabelHelpers-1f0bf8c2.js';\nimport './isObject.js';\nimport { isPlainObject } from './isPlainObject.js';\n\n/**\n * Splits an object (`props`) into a tuple where the first item is an object\n * with the passed `keys`, and the second item is an object with these keys\n * omitted.\n *\n * @deprecated will be removed in version 2\n *\n * @example\n * import { splitProps } from \"reakit-utils\";\n *\n * splitProps({ a: \"a\", b: \"b\" }, [\"a\"]); // [{ a: \"a\" }, { b: \"b\" }]\n */\n\nfunction __deprecatedSplitProps(props, keys) {\n  var propsKeys = Object.keys(props);\n  var picked = {};\n  var omitted = {};\n\n  for (var _i = 0, _propsKeys = propsKeys; _i < _propsKeys.length; _i++) {\n    var key = _propsKeys[_i];\n\n    if (keys.indexOf(key) >= 0) {\n      picked[key] = props[key];\n    } else {\n      omitted[key] = props[key];\n    }\n  }\n\n  return [picked, omitted];\n}\n/**\n * Splits an object (`props`) into a tuple where the first item\n * is the `state` property, and the second item is the rest of the properties.\n *\n * It is also backward compatible with version 1. If `keys` are passed then\n * splits an object (`props`) into a tuple where the first item is an object\n * with the passed `keys`, and the second item is an object with these keys\n * omitted.\n *\n * @example\n * import { splitProps } from \"reakit-utils\";\n *\n * splitProps({ a: \"a\", b: \"b\" }, [\"a\"]); // [{ a: \"a\" }, { b: \"b\" }]\n *\n * @example\n * import { splitProps } from \"reakit-utils\";\n *\n * splitProps({ state: { a: \"a\" }, b: \"b\" }); // [{ a: \"a\" }, { b: \"b\" }]\n */\n\n\nfunction splitProps(props, keys) {\n  if (!isPlainObject(props.state) && keys) {\n    return __deprecatedSplitProps(props, keys);\n  }\n\n  var state = props.state,\n      restProps = _objectWithoutPropertiesLoose(props, [\"state\"]);\n\n  return [props.state, restProps];\n}\n\nexport { splitProps };\n"]},"metadata":{},"sourceType":"module"}