{"ast":null,"code":"import { a as _objectSpread2 } from './_rollupPluginBabelHelpers-1f0bf8c2.js';\nimport './isObject.js';\nimport { isPlainObject } from './isPlainObject.js';\n/**\n * This higher order functions take `propsAreEqual` function and\n * returns a new function which normalizes the props.\n *\n * Normalizing in our case is making sure the `propsAreEqual` works with\n * both version 1 (object spreading) and version 2 (state object) state passing.\n *\n * To achieve this, the returned function in case of a state object\n * will spread the state object in both `prev` and `next props.\n *\n * Other case it just returns the function as is which makes sure\n * that we are still backward compatible\n */\n\nfunction normalizePropsAreEqual(propsAreEqual) {\n  if (propsAreEqual.name === \"normalizePropsAreEqualInner\") {\n    return propsAreEqual;\n  }\n\n  return function normalizePropsAreEqualInner(prev, next) {\n    if (!isPlainObject(prev.state) || !isPlainObject(next.state)) {\n      return propsAreEqual(prev, next);\n    }\n\n    return propsAreEqual(_objectSpread2(_objectSpread2({}, prev.state), prev), _objectSpread2(_objectSpread2({}, next.state), next));\n  };\n}\n\nexport { normalizePropsAreEqual };","map":{"version":3,"sources":["/Users/firushanov/Desktop/Kadince/todowithfirus/frontend/node_modules/reakit-utils/es/normalizePropsAreEqual.js"],"names":["a","_objectSpread2","isPlainObject","normalizePropsAreEqual","propsAreEqual","name","normalizePropsAreEqualInner","prev","next","state"],"mappings":"AAAA,SAASA,CAAC,IAAIC,cAAd,QAAoC,yCAApC;AACA,OAAO,eAAP;AACA,SAASC,aAAT,QAA8B,oBAA9B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,sBAAT,CAAgCC,aAAhC,EAA+C;AAC7C,MAAIA,aAAa,CAACC,IAAd,KAAuB,6BAA3B,EAA0D;AACxD,WAAOD,aAAP;AACD;;AAED,SAAO,SAASE,2BAAT,CAAqCC,IAArC,EAA2CC,IAA3C,EAAiD;AACtD,QAAI,CAACN,aAAa,CAACK,IAAI,CAACE,KAAN,CAAd,IAA8B,CAACP,aAAa,CAACM,IAAI,CAACC,KAAN,CAAhD,EAA8D;AAC5D,aAAOL,aAAa,CAACG,IAAD,EAAOC,IAAP,CAApB;AACD;;AAED,WAAOJ,aAAa,CAACH,cAAc,CAACA,cAAc,CAAC,EAAD,EAAKM,IAAI,CAACE,KAAV,CAAf,EAAiCF,IAAjC,CAAf,EAAuDN,cAAc,CAACA,cAAc,CAAC,EAAD,EAAKO,IAAI,CAACC,KAAV,CAAf,EAAiCD,IAAjC,CAArE,CAApB;AACD,GAND;AAOD;;AAED,SAASL,sBAAT","sourcesContent":["import { a as _objectSpread2 } from './_rollupPluginBabelHelpers-1f0bf8c2.js';\nimport './isObject.js';\nimport { isPlainObject } from './isPlainObject.js';\n\n/**\n * This higher order functions take `propsAreEqual` function and\n * returns a new function which normalizes the props.\n *\n * Normalizing in our case is making sure the `propsAreEqual` works with\n * both version 1 (object spreading) and version 2 (state object) state passing.\n *\n * To achieve this, the returned function in case of a state object\n * will spread the state object in both `prev` and `next props.\n *\n * Other case it just returns the function as is which makes sure\n * that we are still backward compatible\n */\nfunction normalizePropsAreEqual(propsAreEqual) {\n  if (propsAreEqual.name === \"normalizePropsAreEqualInner\") {\n    return propsAreEqual;\n  }\n\n  return function normalizePropsAreEqualInner(prev, next) {\n    if (!isPlainObject(prev.state) || !isPlainObject(next.state)) {\n      return propsAreEqual(prev, next);\n    }\n\n    return propsAreEqual(_objectSpread2(_objectSpread2({}, prev.state), prev), _objectSpread2(_objectSpread2({}, next.state), next));\n  };\n}\n\nexport { normalizePropsAreEqual };\n"]},"metadata":{},"sourceType":"module"}