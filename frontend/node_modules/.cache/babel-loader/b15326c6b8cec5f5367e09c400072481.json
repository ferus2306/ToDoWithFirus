{"ast":null,"code":"function isUpdater(argument) {\n  return typeof argument === \"function\";\n}\n/**\n * Receives a `setState` argument and calls it with `currentValue` if it's a\n * function. Otherwise return the argument as the new value.\n *\n * @example\n * import { applyState } from \"reakit-utils\";\n *\n * applyState((value) => value + 1, 1); // 2\n * applyState(2, 1); // 2\n */\n\n\nfunction applyState(argument, currentValue) {\n  if (isUpdater(argument)) {\n    return argument(currentValue);\n  }\n\n  return argument;\n}\n\nexport { applyState };","map":{"version":3,"sources":["/Users/firushanov/Desktop/Kadince/todowithfirus/frontend/node_modules/reakit-utils/es/applyState.js"],"names":["isUpdater","argument","applyState","currentValue"],"mappings":"AAAA,SAASA,SAAT,CAAmBC,QAAnB,EAA6B;AAC3B,SAAO,OAAOA,QAAP,KAAoB,UAA3B;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAASC,UAAT,CAAoBD,QAApB,EAA8BE,YAA9B,EAA4C;AAC1C,MAAIH,SAAS,CAACC,QAAD,CAAb,EAAyB;AACvB,WAAOA,QAAQ,CAACE,YAAD,CAAf;AACD;;AAED,SAAOF,QAAP;AACD;;AAED,SAASC,UAAT","sourcesContent":["function isUpdater(argument) {\n  return typeof argument === \"function\";\n}\n/**\n * Receives a `setState` argument and calls it with `currentValue` if it's a\n * function. Otherwise return the argument as the new value.\n *\n * @example\n * import { applyState } from \"reakit-utils\";\n *\n * applyState((value) => value + 1, 1); // 2\n * applyState(2, 1); // 2\n */\n\n\nfunction applyState(argument, currentValue) {\n  if (isUpdater(argument)) {\n    return argument(currentValue);\n  }\n\n  return argument;\n}\n\nexport { applyState };\n"]},"metadata":{},"sourceType":"module"}